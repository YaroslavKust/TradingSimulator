// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingSimulator.DAL;

#nullable disable

namespace TradingSimulator.DAL.Migrations
{
    [DbContext(typeof(TradingContext))]
    [Migration("20220430184058_updateDeals")]
    partial class updateDeals
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TradingSimulator.DAL.Models.Active", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ticket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Actives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bitcoin",
                            Ticket = "BTC",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Etherium",
                            Ticket = "ETH",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Litecoin",
                            Ticket = "LTC",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Tesla",
                            Ticket = "TSL",
                            Type = 3
                        },
                        new
                        {
                            Id = 5,
                            Name = "Meta Platform Inc.",
                            Ticket = "FB",
                            Type = 3
                        },
                        new
                        {
                            Id = 6,
                            Name = "Apple",
                            Ticket = "AAPL",
                            Type = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "Microsoft",
                            Ticket = "MSFT",
                            Type = 3
                        },
                        new
                        {
                            Id = 8,
                            Name = "S&P 500",
                            Ticket = "SPX",
                            Type = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Индекс ММВБ",
                            Ticket = "MICEXINDEXCF",
                            Type = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Index Dow Jones",
                            Ticket = "DJI",
                            Type = 2
                        },
                        new
                        {
                            Id = 11,
                            Name = "Gold",
                            Ticket = "XAU",
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            Name = "Platinum",
                            Ticket = "XPT",
                            Type = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Palladium",
                            Ticket = "XPD",
                            Type = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Silver",
                            Ticket = "XAG",
                            Type = 1
                        });
                });

            modelBuilder.Entity("TradingSimulator.DAL.Models.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActiveId")
                        .HasColumnType("int");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Count")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MarginMultiplier")
                        .HasColumnType("int");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("StopLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TakeProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiveId");

                    b.HasIndex("UserId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("TradingSimulator.DAL.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DealId")
                        .HasColumnType("int");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("TradingSimulator.DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TradingSimulator.DAL.Models.Deal", b =>
                {
                    b.HasOne("TradingSimulator.DAL.Models.Active", "Active")
                        .WithMany()
                        .HasForeignKey("ActiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingSimulator.DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Active");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TradingSimulator.DAL.Models.Operation", b =>
                {
                    b.HasOne("TradingSimulator.DAL.Models.Deal", "Deal")
                        .WithMany()
                        .HasForeignKey("DealId");

                    b.Navigation("Deal");
                });
#pragma warning restore 612, 618
        }
    }
}
